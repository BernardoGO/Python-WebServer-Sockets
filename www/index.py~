import socket  # Networking support
import signal  # Signal support (server shutdown on signal receive)
import time    # Current time
import os, sys
import re
import StringIO
#pat = r'.*?\<%(.*)%>.*'


#response_content


def main(request):
    request_method = request.split(' ')[0]
    file_requested = 'www' + request.split(' ')[1].replace(".py", ".html")
    
    print "aaaaaaaaaaa" + file_requested
    try:
        file_handler = open(file_requested,'rb')
        if (request_method == 'GET'):  #only read the file when GET
            response = file_handler.read() # read file content
            match = re.compile(r'<%(.+?)%>', flags=re.DOTALL)
            results = match.findall(response)
            response_content = response

            for res in results:
                codeOut = StringIO.StringIO()
                sys.stdout = codeOut
                exec(res)
                sys.stdout = sys.__stdout__
                response2 = codeOut.getvalue()
                response_content = response_content.replace(res, response2)

        file_handler.close()
        response_headers = 200#self._gen_headers( 200)

    except Exception as e: #in case file was not found, generate 404 page
        print ("Warning, file not found. Serving response code 404\n", e)
        response_headers = 404
        if (request_method == 'GET'):
            response_content = b"<html><body><p>Error 404: File not found</p><p>Python HTTP server</p></body></html>"

    #server_response =  response_headers.encode() # return headers for GET and HEAD
    if (request_method == 'GET'):
        server_response =  response_content  # return additional conten for GET only
        return [response_headers,server_response]


if __name__ == "__main__":
	main("dssad")
